定义：
提供一个创建对象实例的功能，而无须关心其具体实现，被创建实例的类型可以是接口，抽象类，也可以是具体的类

Factory：工厂
Client：客户端
API：定义客户所需要的功能接口
Impl：功能接口事项类，可能会多个



接口：
1.概念：在JAVA中接口是一种特殊的抽象类
2.用途：通常用接口来定义实现类的外观，相当于一份契约，根据外部应用需要的功能，约定了实现类应该实现的功能。
3.接口的思想："封装隔离"
4.使用接口的好处：只要接口不变，内部实现的变化就不会影响到外部应用。从而使的系统更灵活，具有更好的扩展性和维护性。
5.接口和抽象类的选择：
    （1）优先选择接口
    （2）如下情况选择抽象类：既要定义子类的行为，又要为子类提供公共的功能

面向接口编程：
系统分层，每层之间通过接口隔离
每层内部各模块，模块间通过接口隔离。


理解简单工厂：
通过简单工厂实现，面向接口编程

简单工厂：
1.简单工厂的功能：
    用来创建接口抽象类，或者是普通类的实例
2.静态工厂（可以私有化构造函数）
    通常把简单工程类实现成一个工具类，直接使用静态方法就可以了，也就是说简单工厂的方法 通常都是静态的，所以也被称为静态工厂。
3.万能工厂
    一个简单工厂理论上可以用来构造任何对象，所以又称之为“万能工厂”
4.简单工厂创建对象的范围
    建议控制在一个独立的组件级别或者一个模块级别

简单工程命名建议：
1.类名建议为“模块名称+Factory” 比如用户模块的工厂就称为：UserFactory
2.方法名称通常为“get+接口名称” 或者是 “create+接口名称”
3.不建议命名为 new + 接口名称  因为jdk有占用

选择创建实例：
1.参数来源于客户端（客户端必须知道每个参数的含义，内部实现有一定的暴露）
2.参数来源于配置文件（对新增实现非常友好，只需改配置文件。IOC  DI方式，推荐）
3.参数来源于系统自身 比如运行 期间某个值


简单工厂优缺点：
优点：
1.帮助封装
2.解耦（客户端与具体实现）
缺点：
1.可能增加客户端复杂度（需要客户端传参数情况）
2.不方便扩展子工厂（构造方法静态话的情况）

简单工厂的本质：选择实现
何时选用简单工厂：
1.如果想要完全封装隔离具体实现，让外部只能通过接口来操作封装体，那么可以选用简单工厂，让客户端通过工厂来获取相应的接口，而无需关心具体实现
2.如果想要把对外创建对象的职责集中管理和控制，可以选用简单工厂。一个简单工厂可以创建很多的、不相关的对象，可以把对外创建对象的职责集中到一个简单工厂来，从而实现集中管理和控制
